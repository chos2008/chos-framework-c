/*
 *
 *
 * @AUTHOR ADA
 * @VERSION 1.0
 * @SINCE 1.0
 */
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <windows.h>
#include <log.h>
#include "Thread.hpp"

//#define _MT
using namespace std;

#if ! defined _GLOBAL_START_ROUTINE 
DWORD Thread::execute(LPVOID args)
{
	Thread* t = (Thread *) args;
    t->run();
	return 1;
}
#else 
#if defined(_MT) && (! defined(_MT_RT_EX))
void execute(void *args)
{
	debug("start routine defined(_MT) && (! defined(_MT_RT_EX))");
	Thread* t = (Thread *) args;
    t->run();
}
#elif defined(_MT) && defined(_MT_RT_EX)
unsigned __stdcall execute(void *args)
{
	debug("start routine defined(_MT) && defined(_MT_RT_EX)");
	Thread* t = (Thread *) args;
    t->run();
	return 0;
}
#else
DWORD execute(LPVOID args) 
{
	Thread* t = (Thread *) args;
    t->run();
	return 1;
}
#endif
#endif

/**
 *
 *
 *
 */
Thread::Thread() 
{
    this->threadID = 0;
	this->target = NULL;
}

Thread::Thread(const Runnable *runnable)
{
	this->threadID = 0;
	this->target = (Runnable *) runnable;
}

void Thread::start() 
{
#if defined(_MT) && (! defined(_MT_RT_EX))
#ifndef _GLOBAL_START_ROUTINE
	LP_CRT_THREAD_START_ROUTINE startRoutine = (LP_CRT_THREAD_START_ROUTINE) Thread::execute;
	printf("GLOBAL_START_ROUTINE not defined, do not using global thread start routine\n");
#else
	LP_CRT_THREAD_START_ROUTINE startRoutine = (LP_CRT_THREAD_START_ROUTINE) execute;
	printf("GLOBAL_START_ROUTINE defined, using global thread start routine\n");
#endif

#elif defined(_MT) && defined(_MT_RT_EX)
#ifndef _GLOBAL_START_ROUTINE
	LP_CRT_EX_THREAD_START_ROUTINE startRoutine = (LP_CRT_EX_THREAD_START_ROUTINE) Thread::execute;
	printf("GLOBAL_START_ROUTINE not defined, do not using global thread start routine\n");
#else
	LP_CRT_EX_THREAD_START_ROUTINE startRoutine = (LP_CRT_EX_THREAD_START_ROUTINE) execute;
	printf("GLOBAL_START_ROUTINE defined, using global thread start routine\n");
#endif

#else
#ifndef _GLOBAL_START_ROUTINE
	LPTHREAD_START_ROUTINE startRoutine = (LPTHREAD_START_ROUTINE) Thread::execute;
	printf("GLOBAL_START_ROUTINE not defined, do not using global thread start routine\n");
#else
	LPTHREAD_START_ROUTINE startRoutine = (LPTHREAD_START_ROUTINE) execute;
	printf("GLOBAL_START_ROUTINE defined, using global thread start routine\n");
#endif
#endif

#if defined(_MT) && (! defined(_MT_RT_EX))
	debug("begin thread through _beginthread()");
	/*
	 * uintptr_t _beginthread( 
	 *     void( __cdecl *start_address )( void * ),
	 *     unsigned stack_size,
	 *     void *arglist 
	 * );
	 */
	handle = _beginthread(startRoutine, 0, (void *) this);

#elif defined(_MT) && defined(_MT_RT_EX)
	debug("begin thread through _beginthreadex()");
	/*
	 * uintptr_t _beginthreadex( 
	 *     void *security,
     *     unsigned stack_size,
     *     unsigned ( __stdcall *start_address )( void * ),
     *     void *arglist,
     *     unsigned initflag,
     *     unsigned *thrdaddr 
     * );
	 */
	handle =  _beginthreadex(NULL, 0, startRoutine, (void *) this, 0, &(this->threadID));
#else
	handle = ::CreateThread(NULL, 0, startRoutine, (LPVOID) this, 0, &(this->threadID));
#endif

	debug("Thread %d started", this->threadID);
}

void Thread::run() 
{
	if (target != NULL) 
	{
	    target->run();
	}
	else 
	{
		debug("Thread::run()");
	}
}

void Thread::join()
{
	
}
